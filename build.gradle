import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.spotbugs' version '5.0.9'
}

group = 'ipasxa'
version = '1.0.2'

sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    ext.hibernateValidatorVersion = '6.2.4.Final'
    ext.javaxValidationApiVersion = '2.0.1.Final'
    ext.junitVersion = '5.9.0'
    ext.kotlinVersion = '1.7.10'
}

dependencies {
    implementation "javax.validation:validation-api:$javaxValidationApiVersion"
    implementation "org.hibernate.validator:hibernate-validator:$hibernateValidatorVersion"
}

dependencies {
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

check.dependsOn spotbugsMain
check.dependsOn jacocoTestReport

test {
    useJUnitPlatform()

    dependsOn('cleanTest')

    testLogging {
        showStandardStreams = true
        events = [TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR]
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ipasxa/commons-test")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
